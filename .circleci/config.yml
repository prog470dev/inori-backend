# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:
  test:
    working_directory: /go/src/github.com/prog470dev/inori-backend
    docker:
      - image: circleci/golang:1.9
      - image: circleci/mysql:5.7
        command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_bin --innodb-large-prefix=true --innodb-file-format=Barracuda
        environment:
          MYSQL_USER: root
          MYSQL_ROOT_PASSWORD: circleci
          MYSQL_ALLOW_EMPTY_PASSWORD: true
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-vendor-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ checksum "Gopkg.lock" }}
            - go-vendor-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-
            - go-vendor-{{ .Environment.CACHE_VERSION }}-
            - go-vendor-
      - run:
          name: Install Go Libraries (Using dep)
          command: |
            which dep || go get -v -u github.com/golang/dep/cmd/dep
            dep ensure
      - run:
          name: Go Test
          command: go test -v ./...
      - save_cache:
          key: go-vendor-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ checksum "Gopkg.lock" }}
          paths:
            - vendor
      - persist_to_workspace:
          root: .
          paths:
            - vendor
  build:
    working_directory: /go/src/github.com/prog470dev/inori-backend
    docker:
      - image: circleci/golang:1.9
    environment:
      - GOCACHE: "/tmp/go/cache"
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - go-cache-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-
            - go-cache-{{ .Environment.CACHE_VERSION }}-
            - go-cache-
      - run:
          name: Install Go Libraries (Using dep)
          command: |
            which dep || go get -v -u github.com/golang/dep/cmd/dep
            dep ensure
      - run: GOOS=linux GOARCH=amd64 go build -o ino.out
      - run: mkdir Ino && cp dbconfig.yml Ino && cp -r migrations Ino && cp ino.out Ino && cp .circleci/deploy.sh Ino
      - save_cache:
          key: go-cache-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}
          paths:
            - /tmp/go/cache
      - persist_to_workspace:
          root: .
          paths:
            - Ino
            - .circleci/kill.sh
  deploy:
      machine:
        enabled: true
      steps:
        - attach_workspace:
            at: .
        - add_ssh_keys:
            fingerprints:
              - "60:1d:96:93:28:03:f0:9f:9a:3c:e7:35:37:94:a6:71"
        - run:
            name: ssh-key
            command: echo ${SSH_KEY} >> ~/.ssh/known_hosts
        - run:  # 実行ファイルをコピーするためにプロセスを殺す
            name: kill-process
            command: |
              scp -o "StrictHostKeyChecking=no" .circleci/kill.sh ${SSH_USER}@${SSH_HOST}:./
              ssh -o "StrictHostKeyChecking=no" ${SSH_USER}@${SSH_HOST} "chmod 755 kill.sh && ./kill.sh"
        #- run: ssh -o "StrictHostKeyChecking=no" ${SSH_USER}@${SSH_HOST} "pkill -e ino.out"
#        - run: scp -o "StrictHostKeyChecking=no" Ino/ino.out ${SSH_USER}@${SSH_HOST}:./Ino/
#        - run: scp -o "StrictHostKeyChecking=no" Ino/dbconfig.yml ${SSH_USER}@${SSH_HOST}:./Ino/
#        - run: scp -o "StrictHostKeyChecking=no" -r Ino/migrations ${SSH_USER}@${SSH_HOST}:./Ino/
        - run: scp -o "StrictHostKeyChecking=no" -r Ino ${SSH_USER}@${SSH_HOST}:./Ino/
#        - run: scp -o "StrictHostKeyChecking=no" .circleci/deploy.sh ${SSH_USER}@${SSH_HOST}:./Ino/
        - run: ssh -o "StrictHostKeyChecking=no" ${SSH_USER}@${SSH_HOST} "cd Ino && chmod 755 deploy.sh && nohup ./deploy.sh >/dev/null 2>&1 </dev/null &"

workflows:
  version: 2
  ino_deploy_work_flows:
    jobs:
      - test
      - build:
          requires:
            - test
      - deploy:
          requires:
            - build
#          filters:
#            branches:
#              only: master